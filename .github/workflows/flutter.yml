name: Flutter CI/CD

on:
  push:
    branches: [ master, development ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, development ]
  schedule:
    - cron: '0 0 * * *'  # تشغيل يومي

env:
  FLUTTER_VERSION: '3.19.0'
  JAVA_VERSION: '17'

jobs:
  quality:
    name: فحص الجودة
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: إعداد Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      
      - name: تثبيت التبعيات
        run: |
          flutter pub get
          flutter pub global activate coverage
          
      - name: تحليل الكود
        run: flutter analyze
        
      - name: فحص التنسيق
        run: dart format --set-exit-if-changed .
        
      - name: تشغيل الاختبارات مع التغطية
        run: |
          flutter test --coverage
          lcov --remove coverage/lcov.info '**/*.g.dart' '**/*.freezed.dart' -o coverage/lcov.info
          
      - name: تحميل تقرير التغطية
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          
      - name: فحص الأمان
        uses: github/codeql-action/analyze@v2
        
      - name: فحص التبعيات
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build:
    name: بناء التطبيق
    needs: quality
    strategy:
      matrix:
        os: [windows-latest]
        include:
          - os: windows-latest
            build_target: windows
            artifact_name: flutter_publisher_windows.zip
            
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: إعداد Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      
      - name: تثبيت التبعيات
        run: flutter pub get
        
      - name: بناء التطبيق
        run: flutter build ${{ matrix.build_target }} --release
        
      - name: ضغط الملفات
        run: |
          cd build/${{ matrix.build_target }}/runner/Release
          7z a -tzip ../../../${{ matrix.artifact_name }} *
        
      - name: قياس حجم التطبيق
        id: app_size
        run: |
          echo "size=$(stat -f%z build/${{ matrix.artifact_name }})" >> $GITHUB_OUTPUT
          
      - name: فحص الأداء
        run: |
          flutter run --profile --trace-startup
          
      - name: تحميل النسخة
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.build_target }}-build
          path: build/${{ matrix.artifact_name }}
          
  release:
    name: نشر الإصدار
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: تحميل النسخ
        uses: actions/download-artifact@v3
        
      - name: إنشاء ملاحظات الإصدار
        id: release_notes
        run: |
          echo "# التغييرات في هذا الإصدار" > release_notes.md
          echo "" >> release_notes.md
          echo "## الميزات الجديدة" >> release_notes.md
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s" --grep="^feat:" >> release_notes.md
          echo "" >> release_notes.md
          echo "## الإصلاحات" >> release_notes.md
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s" --grep="^fix:" >> release_notes.md
          
      - name: نشر الإصدار
        uses: softprops/action-gh-release@v1
        with:
          files: "**/*.zip"
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: إرسال الإشعارات
    needs: [quality, release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: حالة البناء
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: 'نتيجة البناء والنشر'
          SLACK_MESSAGE: |
            الحالة: ${{ job.status == 'success' && '✅ نجاح' || '❌ فشل' }}
            الفرع: ${{ github.ref }}
            المؤلف: ${{ github.actor }}
            الرابط: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
